---
// Obtener el idioma actual de la URL
const currentPath = Astro.url.pathname;
const currentLang = currentPath.startsWith("/en")
    ? "en"
    : currentPath.startsWith("/es")
      ? "es"
      : "pt";

// ConfiguraciÃ³n de idiomas
const languages = [
    { code: "pt", name: "PortuguÃªs", flag: "ðŸ‡µðŸ‡¹", path: "/" },
    { code: "en", name: "English", flag: "ðŸ‡ºðŸ‡¸", path: "/en/" },
    { code: "es", name: "EspaÃ±ol", flag: "ðŸ‡ªðŸ‡¸", path: "/es/" },
];

// Obtener el resto de la ruta (despuÃ©s del idioma)
const pathWithoutLang = currentPath.replace(/^\/(en|es)/, "") || "/";
---

<div class="relative z-50">
    <div class="relative inline-block dropdown" id="dropdown">
        <button
            class="flex items-center gap-2 px-4 py-2 bg-white bg-opacity-90 backdrop-blur-sm border border-gray-300 rounded-lg cursor-pointer transition-all duration-200 font-medium text-sm text-gray-700 shadow-sm hover:bg-opacity-100 hover:shadow-md focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
            id="languageBtn"
            aria-haspopup="listbox"
            aria-expanded="false"
            aria-controls="languageMenu"
            type="button"
        >
            <span class="flex items-center gap-1">
                <span class="text-base leading-none">
                    {languages.find((lang) => lang.code === currentLang)?.flag}
                </span>
                <span class="text-xs font-semibold uppercase tracking-wide">
                    {currentLang}
                </span>
            </span>
            <svg
                class="w-3 h-2 transition-transform duration-200 text-gray-500 chevron"
                viewBox="0 0 12 8"
                fill="none"
            >
                <path
                    d="M1 1.5L6 6.5L11 1.5"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
            </svg>
        </button>

        <div
            class="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-lg shadow-lg opacity-0 invisible transform translate-y-1 transition-all duration-200 mt-1 overflow-hidden dropdown-menu min-w-max"
            id="languageMenu"
            role="listbox"
            tabindex="-1"
        >
            {
                languages.map((lang, index) => (
                    <a
                        href={
                            lang.code === "pt"
                                ? pathWithoutLang
                                : lang.path.slice(0, -1) + pathWithoutLang
                        }
                        class={`flex items-center gap-3 px-4 py-3 transition-all duration-150 text-sm font-medium no-underline hover:bg-gray-50 focus:outline-none focus:bg-gray-50 ${
                            lang.code === currentLang
                                ? "bg-primary bg-opacity-10 text-secondary font-semibold"
                                : "text-gray-700"
                        }`}
                        data-astro-prefetch
                        data-lang={lang.code}
                        role="option"
                        aria-selected={lang.code === currentLang}
                        tabindex="-1"
                    >
                        <span class="text-base leading-none">{lang.flag}</span>
                        <span class="whitespace-nowrap">{lang.name}</span>
                        {lang.code === currentLang && (
                            <svg
                                class="w-4 h-4 text-primary ml-auto"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                    clip-rule="evenodd"
                                />
                            </svg>
                        )}
                    </a>
                ))
            }
        </div>
    </div>
</div>

<style>
    .dropdown.open .chevron {
        transform: rotate(180deg);
    }

    .dropdown.open .dropdown-menu {
        display: block;
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .dropdown-menu {
        display: none;
        opacity: 0;
        visibility: hidden;
        transform: translateY(1rem);
        transition: all 0.2s;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .dropdown button {
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
        }

        .dropdown-menu a {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
        }
    }
</style>

<script is:inline>
    // Evita mÃºltiples inicializaciones
    let initialized = false;

    function initLanguageSelector() {
        if (initialized) return;
        initialized = true;

        const btn = document.getElementById("languageBtn");
        const menu = document.getElementById("languageMenu");
        const dropdownEl = document.getElementById("dropdown");

        if (!btn || !menu || !dropdownEl) return;

        // Estado inicial cerrado
        dropdownEl.classList.remove("open");
        btn.setAttribute("aria-expanded", "false");

        // Toggle dropdown
        btn.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            const isOpen = dropdownEl.classList.toggle("open");
            btn.setAttribute("aria-expanded", isOpen ? "true" : "false");
            if (isOpen) {
                // Enfoca el primer elemento del menÃº
                const items = menu.querySelectorAll("a");
                items[0]?.focus();
            }
        });

        // Cerrar dropdown al hacer click fuera
        document.addEventListener("click", (e) => {
            if (!dropdownEl.contains(e.target)) {
                dropdownEl.classList.remove("open");
                btn.setAttribute("aria-expanded", "false");
            }
        });

        // Cerrar dropdown con Escape
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                dropdownEl.classList.remove("open");
                btn.setAttribute("aria-expanded", "false");
                btn.focus();
            }
        });

        // NavegaciÃ³n con teclado
        const dropdownItems = menu.querySelectorAll("a");
        dropdownItems.forEach((item, index) => {
            item.addEventListener("keydown", (e) => {
                if (e.key === "ArrowDown") {
                    e.preventDefault();
                    const next = (index + 1) % dropdownItems.length;
                    dropdownItems[next].focus();
                } else if (e.key === "ArrowUp") {
                    e.preventDefault();
                    const prev = (index - 1 + dropdownItems.length) % dropdownItems.length;
                    dropdownItems[prev].focus();
                } else if (e.key === "Enter") {
                    e.preventDefault();
                    item.click();
                }
            });
        });
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initLanguageSelector);
    } else {
        initLanguageSelector();
    }
    document.addEventListener("astro:page-load", () => {
        initialized = false;
        initLanguageSelector();
    });
</script>
